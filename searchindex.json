{"categories":[{"title":"ci/cd","uri":"https://healinyoon.github.io/categories/ci/cd/"},{"title":"go","uri":"https://healinyoon.github.io/categories/go/"},{"title":"msa","uri":"https://healinyoon.github.io/categories/msa/"}],"posts":[{"content":"CI/CD란 CI/CD는 애플리케이션 개발 단계를 자동화하여 보다 작은 코드 단위와 짧은 주기로 Test와 Build를 수행하고 고객에게 제공하는 방법을 의미합니다.\nCI(Continuous Integration): 지속적 통합 개발자의 변경 사항이 정기적으로(최상의 경우 하루 여러번) 빌드 및 테스트 되고 공유 리포지토리에 병합되는 프로세스입니다.\nCD(Continous Deploy or ontinuous Delivery): 지속적 배포 Jez Humble의 정의\nContinuous Deployment is about automating the release of a good build to the production environment. In fact, Humble thinks it might be more accurate to call it “continuous release.”\nContinuous Delivery is about 1) ensuring that every good build is potentially ready for production release. At the very least, 2) it’s sent to the user acceptance test (UAT) environment. 3) Your business team can then decide when a successful build in UAT can be deployed to production —and they can do so at the push of a button.\n상황에 따라 이미 운영되고 있는 프로덕션 환경에 바로 release 하는 것은 문제가 될 수 있습니다. 이러한 경우로 임베디드 소프트웨어 등이 해당됩니다.\n따라서 잠재적으로는 release 가능하지만, 프로덕션 환경에 자동으로 release 되지 않는 것이 Continuous Delivery 입니다. 정리  CI: 지속적인 빌드 / 테스트 / 통합 CD: CI의 연장선 ~ Release 준비 완료(Delivery) or 제품 출시(Deploy)   Jenkins for CI/CD 다양한 CI/CD tool CI/CD 구현을 위한 다양한 tool이 있습니다. tool에 대한 자세한 정보 참고\n왜 Jenkins인가 Jenkins는 아래와 같은 강점을 가지고 있습니다.\n It is an open-source tool with great community support. It is easy to install. It has 1000+ plugins to ease your work. If a plugin does not exist, you can code it and share it with the community. It is free of cost. It is built with Java and hence, it is portable to all the major platforms.  하지만 단점 역시 존재합니다. CI/CD tool 중에서 자주 사용되는 Jenkins vs Gitlab vs Travis 비교 글을 참고하시면 Jenkins의 장단점을 이해하는데 도움이 됩니다.\n","id":0,"section":"posts","summary":"CI/CD란 CI/CD는 애플리케이션 개발 단계를 자동화하여 보다 작은 코드 단위와 짧은 주기로 Test와 Build를 수행하고 고객에게 제공하는 방법을 의미","tags":["jenkins"],"title":"CI/CD와 Jenkins","uri":"https://healinyoon.github.io/2020/08/20200827_cicd_and_jenkins/","year":"2020"},{"content":"HUGO 글 생성하기 $ hugo new {파일명}  HUGO 블로그 빌드 $ hugo -t {테마명}  Git push $ cd public $ git add . $ git commit -m \u0026quot;{commit 메세지}\u0026quot; $ git push origin master $ cd .. $ git add . $ git commit -m \u0026quot;{commit 메세지}\u0026quot; $ git push origin master  ","id":1,"section":"posts","summary":"HUGO 글 생성하기 $ hugo new {파일명} HUGO 블로그 빌드 $ hugo -t {테마명} Git push $ cd public $ git add . $ git commit -m \u0026quot;{commit 메세지}\u0026quot; $ git push origin master $ cd .. $ git add . $ git commit -m \u0026quot;{commit 메","tags":["go","hugo","blog"],"title":"HUGO 블로그 새글 업로드하기","uri":"https://healinyoon.github.io/2020/08/20200827_hugo_blog/","year":"2020"},{"content":"Intro 이번 포스트에서는 CentOS에 Docker를 설치하는 방법을 정리했습니다.\n 1. Docker 설치하기 # yum 패키지 업데이트 yum update # docker, docker registry 설치 yum -y install docker docker-registry   2. Docker 실행 및 정보 확인 2-1. Docker 실행하기 # 시스템 부팅 시 docker를 시작하도록 설정 systemctl enable docker.service # Docker 실행 systemctl start docker.service # Docker 상태 확인 systemctl status docker.service  2-2. Docker 명령어 사용하기 Docker 명령어의 기본 형식은 docker {명령어} 입니다.\n# Docker 버전 확인 docker version # Docker 실행 환경 확인 docker system info # Docker 디스크 상태 확인 docker system df # 그 외 Docker 명령어 살펴보기 docker -help   3. Docker 사용해보기 Docker가 정상적으로 동작하는지 확인하기 위해 컨테이너를 실행합니다.\n3-1. Docker 컨테이너 실행하기 # Docker 컨테이너 실행 명령어 docker run {옵션} {컨테이너 명/ID}  docker run 명령어는 컨테이너를 생성하고 실행시키는 명령어 입니다. 이때 dockers는 로컬에 해당 이미지가 있는지 학인하고, 없는 경우 docker hub에서 pull을 먼저 진행하고 컨테이너를 생성합니다.\n3-2. Hello, world! docker run hello-world  hello-world 컨테이너가 실행되면 다음과 같이 메세지가 출력됩니다.\nHello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.  3-3. Nginx 이번에는 Nginx 웹서버를 docker로 설치해보겠습니다.\n# Nginx 이미지 다운로드 docker pull nginx # 다운로드한 이미지 확인 docker images # Nginx 컨테이너 실행 docker run --name nginx-webserver -d -p 80:80 nginx  docker run 명령어에서 자주 쓰이는 옵션은 다음과 같습니다.\n \u0026ndash;name: 컨테이너의 이름을 설정한다. -d: 컨테이너를 백그라운드에서 실행시킨다. -p: 호스트 포트와 컨테이너 내부의 포트를 매핑한다(형식: -p {host 포트}:{컨테이너 포트}).  실행중인 docker 컨테이너를 확인하고 싶을 때는 docker ps 명령어로 확인 할 수 있습니다.\n# 실행중인 컨테이너 확인 docker ps # 컨테이너 상태 확인 docker container stats  마지막으로 http://localhost:80으로 접속해서 Nginx 웹 브라우저를 확인합니다.\n 참고 사이트  https://niceman.tistory.com/36 https://futurecreator.github.io/2018/11/16/docker-container-basics/ http://pyrasis.com/Docker/Docker-HOWTO  ","id":2,"section":"posts","summary":"Intro 이번 포스트에서는 CentOS에 Docker를 설치하는 방법을 정리했습니다. 1. Docker 설치하기 # yum 패키지 업데이트 yum update # docker, docker registry 설치 yum -y install docker docker-registry 2. Docker 실행 및","tags":["docker"],"title":"Docker 설치하기(CentOS)","uri":"https://healinyoon.github.io/2019/06/20190611_docker_install/","year":"2019"}],"tags":[{"title":"blog","uri":"https://healinyoon.github.io/tags/blog/"},{"title":"docker","uri":"https://healinyoon.github.io/tags/docker/"},{"title":"go","uri":"https://healinyoon.github.io/tags/go/"},{"title":"hugo","uri":"https://healinyoon.github.io/tags/hugo/"},{"title":"jenkins","uri":"https://healinyoon.github.io/tags/jenkins/"}]}